name: OpenAPI Client Generation

on:
  # Trigger on changes to OpenAPI specs or build files
  push:
    paths:
      - 'services/*/openapi.yaml'
      - 'services/*/src/main/kotlin/**/*Controller.kt'
      - 'build.gradle.kts'
      - 'gradle.properties'
      - '.github/workflows/openapi-clients.yml'
    branches: [main, develop]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      services:
        description: 'Comma-separated list of services to generate (leave empty for all)'
        required: false
        default: ''
      force_regenerate:
        description: 'Force regeneration even if up-to-date'
        type: boolean
        required: false
        default: false
      benchmark:
        description: 'Run performance benchmark'
        type: boolean
        required: false
        default: false

  # Trigger on schedule (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx4g

jobs:
  # Job to detect which services need client regeneration
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
      all-services: ${{ steps.detect.outputs.all-services }}
      needs-generation: ${{ steps.detect.outputs.needs-generation }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Detect services needing regeneration
        id: detect
        run: |
          # List all configured services
          ALL_SERVICES=$(./gradlew listServices -q | grep "🔹" | sed 's/🔹 //' | tr '\n' ',' | sed 's/,$//')
          echo "all-services=$ALL_SERVICES" >> $GITHUB_OUTPUT

          # Check if manual input provided
          if [ -n "${{ github.event.inputs.services }}" ]; then
            echo "services=${{ github.event.inputs.services }}" >> $GITHUB_OUTPUT
            echo "needs-generation=true" >> $GITHUB_OUTPUT
            echo "Manual service selection: ${{ github.event.inputs.services }}"
            exit 0
          fi

          # Check if force regeneration requested
          if [ "${{ github.event.inputs.force_regenerate }}" = "true" ]; then
            echo "services=$ALL_SERVICES" >> $GITHUB_OUTPUT
            echo "needs-generation=true" >> $GITHUB_OUTPUT
            echo "Force regeneration requested for all services"
            exit 0
          fi

          # Check which services need regeneration
          ./gradlew checkGeneratedClientsUpToDate > status.txt 2>&1 || true

          # Parse services that need regeneration
          NEEDS_REGEN=$(grep "⚠️" status.txt | cut -d':' -f1 | tr '\n' ',' | sed 's/,$//' || echo "")

          if [ -n "$NEEDS_REGEN" ]; then
            echo "services=$NEEDS_REGEN" >> $GITHUB_OUTPUT
            echo "needs-generation=true" >> $GITHUB_OUTPUT
            echo "Services needing regeneration: $NEEDS_REGEN"
          else
            echo "services=" >> $GITHUB_OUTPUT
            echo "needs-generation=false" >> $GITHUB_OUTPUT
            echo "All services are up to date"
          fi

          cat status.txt

  # Job to generate OpenAPI specifications
  generate-specs:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.needs-generation == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Start required services for spec generation
        run: |
          # Start Docker services needed for OpenAPI generation
          docker-compose -f docker-compose.dev.yml up -d postgres redis rabbitmq

          # Wait for services to be ready
          sleep 30

      - name: Generate OpenAPI specifications
        run: |
          echo "Generating OpenAPI specifications..."
          ./gradlew generateAllOpenApiSpecs --continue || true

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.dev.yml down

      - name: Upload OpenAPI specs
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specs-${{ github.run_number }}
          path: services/*/openapi.yaml
          retention-days: 30

  # Job to generate API clients
  generate-clients:
    runs-on: ubuntu-latest
    needs: [detect-changes, generate-specs]
    if: needs.detect-changes.outputs.needs-generation == 'true'
    strategy:
      matrix:
        service: ${{ fromJson(format('[{0}]', needs.detect-changes.outputs.services)) }}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Download OpenAPI specs
        uses: actions/download-artifact@v4
        with:
          name: openapi-specs-${{ github.run_number }}
          path: services/

      - name: Generate client for ${{ matrix.service }}
        run: |
          echo "Generating client for ${{ matrix.service }}..."
          ./gradlew generate${{ matrix.service }}Client --info

      - name: Validate generated client
        run: ./gradlew validate${{ matrix.service }}Client

      - name: Upload generated client
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.service }}-${{ github.run_number }}
          path: build/generated/*${{ matrix.service }}*
          retention-days: 7

  # Job to run comprehensive validation
  validate-clients:
    runs-on: ubuntu-latest
    needs: [detect-changes, generate-clients]
    if: needs.detect-changes.outputs.needs-generation == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Download all generated clients
        uses: actions/download-artifact@v4
        with:
          pattern: client-*-${{ github.run_number }}
          path: build/generated/
          merge-multiple: true

      - name: Download OpenAPI specs
        uses: actions/download-artifact@v4
        with:
          name: openapi-specs-${{ github.run_number }}
          path: services/

      - name: Run comprehensive validation
        run: |
          echo "Running comprehensive client validation..."
          ./gradlew validateAllClients --continue

      - name: Run client integration tests
        run: |
          echo "Running client integration tests..."
          ./gradlew test --tests "*ClientIntegrationTest*" --continue || true

      - name: Generate validation report
        run: |
          echo "# OpenAPI Client Validation Report" > validation-report.md
          echo "Generated on: $(date)" >> validation-report.md
          echo "" >> validation-report.md

          echo "## Services Processed" >> validation-report.md
          echo "${{ needs.detect-changes.outputs.services }}" | tr ',' '\n' | while read service; do
            if [ -n "$service" ]; then
              echo "- $service" >> validation-report.md
            fi
          done

          echo "" >> validation-report.md
          echo "## Validation Results" >> validation-report.md
          ./gradlew checkGeneratedClientsUpToDate >> validation-report.md 2>&1 || true

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-${{ github.run_number }}
          path: validation-report.md
          retention-days: 30

  # Optional performance benchmark job
  benchmark:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event.inputs.benchmark == 'true' || github.event_name == 'schedule'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Run performance benchmark
        run: |
          echo "Running client generation benchmark..."
          ./gradlew benchmarkClientGeneration > benchmark-results.txt 2>&1

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: benchmark-results.txt
          retention-days: 30

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const benchmarkResults = fs.readFileSync('benchmark-results.txt', 'utf8');

            const comment = `## 🏃‍♂️ OpenAPI Client Generation Benchmark

            \`\`\`
            ${benchmarkResults}
            \`\`\`

            _Benchmark run on: ${new Date().toISOString()}_`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job to create summary and notifications
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, generate-specs, generate-clients, validate-clients]
    if: always() && needs.detect-changes.outputs.needs-generation == 'true'

    steps:
      - name: Create job summary
        run: |
          echo "# OpenAPI Client Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Services Processed" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.detect-changes.outputs.services }}" | tr ',' '\n' | while read service; do
            if [ -n "$service" ]; then
              echo "- $service" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Spec Generation:** ${{ needs.generate-specs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Client Generation:** ${{ needs.generate-clients.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation:** ${{ needs.validate-clients.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.generate-clients.result }}" = "success" ] && [ "${{ needs.validate-clients.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All clients generated and validated successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some issues occurred during generation or validation.**" >> $GITHUB_STEP_SUMMARY
            echo "Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::OpenAPI client generation workflow failed. Check the logs for details."
