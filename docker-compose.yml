

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-puntog}
      POSTGRES_USER: ${POSTGRES_USER:-puntog}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686' # UI
      - '14268:14268' # API

  vault:
    image: hashicorp/vault:1.15.4
    container_name: vault
    ports:
      - '8200:8200'
      - '8201:8201'
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroottoken
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
    cap_add:
      - IPC_LOCK
    command: 'server -dev -dev-root-token-id=myroottoken -dev-listen-address=0.0.0.0:8200'

  debezium-connect:
    image: debezium/connect:2.5
    ports:
      - '8083:8083'
    depends_on:
      - postgres
      - rabbitmq
    environment:
      BOOTSTRAP_SERVERS: 'kafka:9092' # Placeholder
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
    volumes:
      - ./ops/debezium:/kafka/connect

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - '8080:8080'
    depends_on:
      auth-service:
        condition: service_healthy
      redemption-service:
        condition: service_healthy
      station-service:
        condition: service_healthy
      ad-engine:
        condition: service_healthy
      # raffle-service:
      #   condition: service_healthy
      jaeger:
        condition: service_started
      vault:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - VAULT_TOKEN=myroottoken
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        sleep 10 && # Wait for Vault to be ready
        vault login myroottoken &&
        vault kv put secret/application jwt_secret=supersecretkey jwt_refresh_secret=supersecretrefreshkey qr_signature_secret=qrsignaturesecret fallback_ad_url=http://example.com/fallback.mp4 postgres_user=puntog postgres_password=changeme postgres_db=puntog redis_host=redis rabbitmq_host=rabbitmq &&
        java $JAVA_OPTS -jar /app/app.jar
      "

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: auth-service
    ports:
      - '8081:8080'
    depends_on:
      - postgres
      - redis
      - jaeger
      - vault
    environment:
      - VAULT_TOKEN=myroottoken

  redemption-service:
    build:
      context: .
      dockerfile: services/redemption-service/Dockerfile
    container_name: redemption-service
    ports:
      - '8082:8080'
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - jaeger
      - vault
    environment:
      - VAULT_TOKEN=myroottoken

  station-service:
    build:
      context: .
      dockerfile: services/station-service/Dockerfile
    container_name: station-service
    depends_on:
      - postgres
      - jaeger
      - vault
    environment:
      - VAULT_TOKEN=myroottoken

  ad-engine:
    build:
      context: .
      dockerfile: services/ad-engine/Dockerfile
    container_name: ad-engine
    ports:
      - '8084:8080'
    depends_on:
      - postgres
      - jaeger
      - vault
    environment:
      - VAULT_TOKEN=myroottoken

  # raffle-service:
  #   build:
  #     context: .
  #     dockerfile: services/raffle-service/Dockerfile
  #   container_name: raffle-service
  #   ports:
  #     - '8085:8080'
  #   depends_on:
  #     - postgres
  #     - jaeger
  #     - vault
  #   environment:
  #     - VAULT_TOKEN=myroottoken

  coupon-service:
    build:
      context: .
      dockerfile: services/coupon-service/Dockerfile
    container_name: coupon-service
    ports:
      - '8086:8080'
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - jaeger
      - vault
    environment:
      - VAULT_TOKEN=myroottoken
      - JAVA_OPTS=-Xmx512m -Xms256m
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
