version: '3.8'

services:
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    volumes:
      - redis_prod_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_prod_data:/var/lib/rabbitmq
    restart: unless-stopped

  vault:
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
    volumes:
      - vault_prod_data:/vault/data
    restart: unless-stopped

  api-gateway:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx1g -Xms512m
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M

  auth-service:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M

  coupon-service:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M

  station-service:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped

  ad-engine:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped

  raffle-service:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped

  redemption-service:
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN}
      - JAVA_OPTS=-Xmx512m -Xms256m
    restart: unless-stopped

  owner-dashboard:
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_GATEWAY_URL}
    restart: unless-stopped

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - owner-dashboard
    restart: unless-stopped

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:
  rabbitmq_prod_data:
  vault_prod_data:
  prometheus_data:
  grafana_data:
